// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

enum Role {
    USER
    ADMIN
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?

    //Custom
    role    Role    @default(USER)
    country String?
    city    String?
    address String?
    zip     String?

    //Relations
    accounts Account[]
    sessions Session[]

    //Custom
    orders Order[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Movie {
    id          String   @id @default(uuid())
    title       String
    description String?
    price       Decimal
    releaseDate DateTime
    imageURL    String?
    stock       Int

    //Relations
    peopleJob Job[]
    genres    Genre[]
    OrderItem OrderItem[]
}

model Genre {
    id   String @id @default(uuid())
    name String

    //Relations
    movies Movie[]
}

model People {
    id   String @id @default(uuid())
    name String

    //Relations
    peopleJob Job[]
}

model Job {
    id       String @id @default(uuid())
    jobTitle String

    //Relations
    movieId  String
    movie    Movie  @relation(fields: [movieId], references: [id])
    peopleId String
    people   People @relation(fields: [peopleId], references: [id])

    @@unique([movieId, peopleId, jobTitle])
}

model Order {
    id          String   @id @default(uuid())
    userId      String
    User        User     @relation(fields: [userId], references: [id])
    totalAmount Decimal
    status      String
    orderDate   DateTime @default(now())

    //Relations
    orderItems OrderItem[]
}

model OrderItem {
    id              String  @id @default(uuid())
    priceAtPurchase Decimal

    quantity Int

    //Relations
    Order   Order  @relation(fields: [orderId], references: [id])
    orderId String
    movie   Movie  @relation(fields: [movieId], references: [id])
    movieId String
}
